worker_processes  2;
user www-data www-data;

events {
    worker_connections  102400;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    include       /data/nas/codes/confs/nginx/waf.conf;
    resolver 114.114.114.114;

    map $http_user_agent $agent {
        ~curl curl;
        ~*chrome chrome;
    }

    map $uri $loggable {
        ~.+[.](jpeg|jpg|png|gif|css|js|xml|flv|mp3|mp4|swf|zip|rar|txt|ico)$ 0;
        ~^/check-live\.php$ 0;
        default 1;
    }


    log_format  main  '$remote_addr - - [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" "$http_user_agent" '
                      '"$host" "$http_x_forwarded_for" $request_time $upstream_response_time';

    access_log  /var/log/nginx/access/access.log main if=$loggable;
    error_log  /var/log/nginx/error/error.log;

    #lua_package_path '/usr/local/openresty/lualib/?.lua;/usr/local/openresty/luajit/share/lua/5.1/?.lua;/usr/local/openresty/luajit/share/lua/5.1/?/init.lua;/var/www/lualib/?.lua;';
    #lua_package_cpath '/usr/local/openresty/lualib/?.so;/usr/local/openresty/luajit/lib/lua/5.1/?.so;/var/www/lualib/?.so';
    #lua_need_request_body on;

    sendfile        on;
    keepalive_timeout  65;
    include /data/nas/codes/confs/nginx/gzip.conf;


    client_max_body_size 105M;

    real_ip_header X-Forwarded-For;
    real_ip_recursive on;
    set_real_ip_from 0.0.0.0/0;

    map $http_x_client_scheme $rscheme {
      default $scheme;
      https https;
    }

    include /data/nas/codes/confs/nginx/slow_ips.conf;
    limit_req_status 429;
    limit_req_zone $slow_spider zone=slow_spider:40m rate=2r/s;
    limit_conn_zone $binary_remote_addr zone=video_zone:10m;


    server {
        listen       80 default_server;
        server_name  l.lab localhost;

        set $flag "x";
        if ($http_x_client_scheme ~* "https") {
            set $flag "${flag}1";
        }

        if ($request_method ~* "GET")  {
            set $flag "${flag}2";
        }

        if ($flag = "x23") {
            rewrite ^(.*)$  https://$host$1 permanent;
        }

        location /hello {
            default_type text/plain;
            echo http_user_agent: $http_user_agent;
            echo agent: agent:$agent;
        }
	
	
	    set $lua_code_cache off;
        include /var/www/nginx[.]params;
	
        location / {
            root   /var/www/public;
            index  index.html index.php;
    
            if (-f $request_filename) {
                expires max;
                break;
            }

            rewrite ^/wechat/(\w+) /lumen.php last;
    
            if (-d $request_filename) {
                rewrite ^/(.*)([^/])$ http://$host/$1$2/ permanent;
            }

            if ($request_filename !~ "\.(js|htc|ico|gif|jpg|png|css|php)$") {
                rewrite ^(.+)$ /index.php$1 last;
            }
        }
    
        error_page   404              /404.html;
        error_page   500 502 503 504  /50x.html;
        location = /404.html {
            root   /usr/local/openresty/nginx/html;
        }
        location = /50x.html {
            root   /usr/local/openresty/nginx/html;
        }

        location ~ ^/uploads/.*\.(php)$ {
            return 403;
        }

        location ~ ^/uploads/.*/\..*t\d+(x\d+)?(m?([nafsl](\d+)?)?)?\.jpg$ {
            expires 15d;
            add_header Cache-Control public;

            set $image_uri /thumb.php?file=$uri;

            if (!-f $request_filename) {
               proxy_pass http://127.0.0.1$image_uri;
               break;
            }
        }

        location /uploads {
            root   /var/www/public;
            expires 15d;
            add_header Cache-Control public;
        }

        location ~ \.php(/|$) {
            root   /var/www/public;
            fastcgi_pass   unix:/var/run/fpm.sock;
            include /data/nas/codes/confs/nginx/fastcgi.conf;
            include /data/nas/codes/confs/nginx/limit.conf;
            access_by_lua_file /data/nas/codes/confs/nginx/waf/waf.lua;
        }

        location ~ /\.ht {
            deny  all;
        }
    }

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

}

